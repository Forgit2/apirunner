# Simple REST API Test Example
# This example demonstrates a basic GET request with common assertions

name: "Get Users - Simple REST API Test"
description: "Fetch a list of users from JSONPlaceholder API and validate the response"
tags: ["basic", "rest", "get", "json"]

# Test configuration
timeout: 30s
retry_count: 2
retry_delay: 1s

# Request definition
request:
  protocol: "http"
  method: "GET"
  url: "https://jsonplaceholder.typicode.com/users"
  headers:
    Accept: "application/json"
    User-Agent: "API-Test-Runner/1.0"
    # Custom header example
    X-Test-Source: "api-test-runner-example"

# Assertions to validate the response
assertions:
  # Basic HTTP status validation
  - type: "status_code"
    expected: 200
    message: "Should return HTTP 200 OK"
  
  # Response time validation
  - type: "response_time"
    expected: 2000  # milliseconds
    message: "Should respond within 2 seconds"
  
  # Header validation
  - type: "header"
    name: "Content-Type"
    expected: "application/json; charset=utf-8"
    message: "Should return JSON content type"
  
  # JSON structure validation - check if response is an array
  - type: "json_path"
    path: "$"
    expected_type: "array"
    message: "Response should be a JSON array"
  
  # Validate array length
  - type: "json_path"
    path: "$.length"
    expected: 10
    message: "Should return exactly 10 users"
  
  # Validate first user's structure
  - type: "json_path"
    path: "$[0].id"
    exists: true
    message: "First user should have an ID"
  
  - type: "json_path"
    path: "$[0].name"
    expected: "Leanne Graham"
    message: "First user should be Leanne Graham"
  
  - type: "json_path"
    path: "$[0].email"
    regex: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    message: "First user should have a valid email format"
  
  # Validate nested object structure
  - type: "json_path"
    path: "$[0].address.city"
    expected: "Gwenborough"
    message: "First user should be from Gwenborough"
  
  # JSON Schema validation for complete structure validation
  - type: "json_schema"
    message: "Response should match the expected user schema"
    schema: |
      {
        "type": "array",
        "minItems": 1,
        "items": {
          "type": "object",
          "required": ["id", "name", "username", "email", "address", "phone", "website", "company"],
          "properties": {
            "id": {"type": "integer"},
            "name": {"type": "string"},
            "username": {"type": "string"},
            "email": {"type": "string", "format": "email"},
            "address": {
              "type": "object",
              "required": ["street", "suite", "city", "zipcode", "geo"],
              "properties": {
                "street": {"type": "string"},
                "suite": {"type": "string"},
                "city": {"type": "string"},
                "zipcode": {"type": "string"},
                "geo": {
                  "type": "object",
                  "required": ["lat", "lng"],
                  "properties": {
                    "lat": {"type": "string"},
                    "lng": {"type": "string"}
                  }
                }
              }
            },
            "phone": {"type": "string"},
            "website": {"type": "string"},
            "company": {
              "type": "object",
              "required": ["name", "catchPhrase", "bs"],
              "properties": {
                "name": {"type": "string"},
                "catchPhrase": {"type": "string"},
                "bs": {"type": "string"}
              }
            }
          }
        }
      }

# Variable extraction for use in subsequent tests
variable_extractions:
  - name: "first_user_id"
    json_path: "$[0].id"
    description: "Extract the first user's ID for use in other tests"
  
  - name: "user_count"
    json_path: "$.length"
    description: "Extract the total number of users"

# Metadata for test organization
metadata:
  category: "smoke_test"
  priority: "high"
  owner: "api_team"
  created_date: "2024-01-15"
  last_updated: "2024-01-15"